// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: doxchain/abs/v1beta1/partitioned_pool_corridor.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ParitionedPoolCorridor struct {
	Threshold ParitionedPoolThreshold `protobuf:"bytes,1,opt,name=threshold,proto3" json:"threshold"`
	Target    types.Coin              `protobuf:"bytes,2,opt,name=target,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"target" yaml:"coin"`
}

func (m *ParitionedPoolCorridor) Reset()         { *m = ParitionedPoolCorridor{} }
func (m *ParitionedPoolCorridor) String() string { return proto.CompactTextString(m) }
func (*ParitionedPoolCorridor) ProtoMessage()    {}
func (*ParitionedPoolCorridor) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d645281a33f53fc, []int{0}
}
func (m *ParitionedPoolCorridor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParitionedPoolCorridor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParitionedPoolCorridor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParitionedPoolCorridor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParitionedPoolCorridor.Merge(m, src)
}
func (m *ParitionedPoolCorridor) XXX_Size() int {
	return m.Size()
}
func (m *ParitionedPoolCorridor) XXX_DiscardUnknown() {
	xxx_messageInfo_ParitionedPoolCorridor.DiscardUnknown(m)
}

var xxx_messageInfo_ParitionedPoolCorridor proto.InternalMessageInfo

func (m *ParitionedPoolCorridor) GetThreshold() ParitionedPoolThreshold {
	if m != nil {
		return m.Threshold
	}
	return ParitionedPoolThreshold{}
}

func (m *ParitionedPoolCorridor) GetTarget() types.Coin {
	if m != nil {
		return m.Target
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*ParitionedPoolCorridor)(nil), "beheroes.doxchain.abs.v1beta1.ParitionedPoolCorridor")
}

func init() {
	proto.RegisterFile("doxchain/abs/v1beta1/partitioned_pool_corridor.proto", fileDescriptor_8d645281a33f53fc)
}

var fileDescriptor_8d645281a33f53fc = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xbd, 0x4e, 0xf3, 0x30,
	0x14, 0x86, 0xe3, 0x4f, 0x9f, 0x2a, 0x91, 0x6e, 0x15, 0x42, 0xa5, 0x12, 0x2e, 0xea, 0x54, 0x86,
	0xda, 0x2a, 0x7f, 0x03, 0x0b, 0x52, 0x7b, 0x03, 0x55, 0xc5, 0xd4, 0xa5, 0xb2, 0x13, 0x2b, 0xb1,
	0x48, 0x72, 0x22, 0xdb, 0xa0, 0xf6, 0x2e, 0xb8, 0x0e, 0xae, 0xa4, 0x63, 0x47, 0xa6, 0x82, 0x92,
	0x85, 0x99, 0x2b, 0x40, 0x71, 0xdc, 0x00, 0x0b, 0x62, 0xb2, 0x25, 0xfb, 0x79, 0xce, 0x7b, 0x5e,
	0xff, 0x32, 0x84, 0x55, 0x10, 0x33, 0x99, 0x51, 0xc6, 0x35, 0x7d, 0x1c, 0x73, 0x61, 0xd8, 0x98,
	0xe6, 0x4c, 0x19, 0x69, 0x24, 0x64, 0x22, 0x5c, 0xe6, 0x00, 0xc9, 0x32, 0x00, 0xa5, 0x64, 0x08,
	0x8a, 0xe4, 0x0a, 0x0c, 0x74, 0x4e, 0xb8, 0x88, 0x85, 0x02, 0xa1, 0xc9, 0x1e, 0x27, 0x8c, 0x6b,
	0xe2, 0xf0, 0xde, 0x61, 0x04, 0x11, 0xd8, 0x9f, 0xb4, 0xba, 0xd5, 0x50, 0xef, 0xea, 0x6f, 0xa3,
	0x4c, 0xac, 0x84, 0x8e, 0x21, 0x09, 0x1d, 0x86, 0x03, 0xd0, 0x29, 0x68, 0xca, 0x99, 0x16, 0x0d,
	0x15, 0x80, 0xcc, 0xea, 0xf7, 0xc1, 0x3b, 0xf2, 0x8f, 0x66, 0x4c, 0x39, 0xc7, 0x0c, 0x20, 0x99,
	0xba, 0xb0, 0x9d, 0x85, 0x7f, 0xd0, 0xd8, 0xba, 0xe8, 0x14, 0x0d, 0xdb, 0xe7, 0xd7, 0xe4, 0xd7,
	0xe8, 0xe4, 0xa7, 0xe9, 0x6e, 0x4f, 0x4f, 0xfe, 0x6f, 0x76, 0x7d, 0x6f, 0xfe, 0xa5, 0xeb, 0x28,
	0xbf, 0x65, 0x98, 0x8a, 0x84, 0xe9, 0xfe, 0xb3, 0xe2, 0x63, 0x52, 0xe7, 0x24, 0x55, 0xce, 0x46,
	0x37, 0x05, 0x99, 0x4d, 0x6e, 0x2b, 0xf6, 0x63, 0xd7, 0x6f, 0xaf, 0x59, 0x9a, 0xdc, 0x0c, 0xaa,
	0xec, 0x83, 0xe7, 0xd7, 0xfe, 0x30, 0x92, 0x26, 0x7e, 0xe0, 0x24, 0x80, 0x94, 0xba, 0x1d, 0xeb,
	0x63, 0xa4, 0xc3, 0x7b, 0x6a, 0xd6, 0xb9, 0xd0, 0x96, 0xd7, 0x73, 0x37, 0x69, 0x32, 0xdd, 0x14,
	0x18, 0x6d, 0x0b, 0x8c, 0xde, 0x0a, 0x8c, 0x9e, 0x4a, 0xec, 0x6d, 0x4b, 0xec, 0xbd, 0x94, 0xd8,
	0x5b, 0x9c, 0x7d, 0x73, 0x71, 0x31, 0xaa, 0x37, 0xa4, 0x4d, 0xe1, 0x2b, 0x5b, 0xb9, 0x55, 0xf2,
	0x96, 0xad, 0xed, 0xe2, 0x33, 0x00, 0x00, 0xff, 0xff, 0x0e, 0x76, 0x27, 0xb2, 0xfa, 0x01, 0x00,
	0x00,
}

func (m *ParitionedPoolCorridor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParitionedPoolCorridor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParitionedPoolCorridor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Target.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPartitionedPoolCorridor(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Threshold.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPartitionedPoolCorridor(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintPartitionedPoolCorridor(dAtA []byte, offset int, v uint64) int {
	offset -= sovPartitionedPoolCorridor(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ParitionedPoolCorridor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Threshold.Size()
	n += 1 + l + sovPartitionedPoolCorridor(uint64(l))
	l = m.Target.Size()
	n += 1 + l + sovPartitionedPoolCorridor(uint64(l))
	return n
}

func sovPartitionedPoolCorridor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPartitionedPoolCorridor(x uint64) (n int) {
	return sovPartitionedPoolCorridor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ParitionedPoolCorridor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPartitionedPoolCorridor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParitionedPoolCorridor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParitionedPoolCorridor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartitionedPoolCorridor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPartitionedPoolCorridor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPartitionedPoolCorridor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Threshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartitionedPoolCorridor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPartitionedPoolCorridor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPartitionedPoolCorridor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPartitionedPoolCorridor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPartitionedPoolCorridor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPartitionedPoolCorridor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPartitionedPoolCorridor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPartitionedPoolCorridor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPartitionedPoolCorridor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPartitionedPoolCorridor
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPartitionedPoolCorridor
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPartitionedPoolCorridor
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPartitionedPoolCorridor        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPartitionedPoolCorridor          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPartitionedPoolCorridor = fmt.Errorf("proto: unexpected end of group")
)
