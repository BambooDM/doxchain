// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: doxchain/abs/v1beta1/partitioned_pool_configuraton.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ParitionedPoolConfiguration struct {
	Threshold ParitionedPoolThreshold   `protobuf:"bytes,1,opt,name=threshold,proto3" json:"threshold"`
	Corridors []*ParitionedPoolCorridor `protobuf:"bytes,2,rep,name=Corridors,proto3" json:"Corridors,omitempty"`
}

func (m *ParitionedPoolConfiguration) Reset()         { *m = ParitionedPoolConfiguration{} }
func (m *ParitionedPoolConfiguration) String() string { return proto.CompactTextString(m) }
func (*ParitionedPoolConfiguration) ProtoMessage()    {}
func (*ParitionedPoolConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_95ccf06807e3b8d0, []int{0}
}
func (m *ParitionedPoolConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParitionedPoolConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParitionedPoolConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParitionedPoolConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParitionedPoolConfiguration.Merge(m, src)
}
func (m *ParitionedPoolConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *ParitionedPoolConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_ParitionedPoolConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_ParitionedPoolConfiguration proto.InternalMessageInfo

func (m *ParitionedPoolConfiguration) GetThreshold() ParitionedPoolThreshold {
	if m != nil {
		return m.Threshold
	}
	return ParitionedPoolThreshold{}
}

func (m *ParitionedPoolConfiguration) GetCorridors() []*ParitionedPoolCorridor {
	if m != nil {
		return m.Corridors
	}
	return nil
}

func init() {
	proto.RegisterType((*ParitionedPoolConfiguration)(nil), "beheroes.doxchain.abs.v1beta1.ParitionedPoolConfiguration")
}

func init() {
	proto.RegisterFile("doxchain/abs/v1beta1/partitioned_pool_configuraton.proto", fileDescriptor_95ccf06807e3b8d0)
}

var fileDescriptor_95ccf06807e3b8d0 = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0x63, 0x40, 0x48, 0x4d, 0xb7, 0x88, 0xa1, 0x2a, 0xc2, 0x54, 0x4c, 0x65, 0xc0, 0x56,
	0x0b, 0x45, 0xcc, 0xcd, 0x0b, 0x54, 0x15, 0x0b, 0x5d, 0x2a, 0x3b, 0x31, 0xb1, 0xa5, 0xe0, 0x1b,
	0xd9, 0x2e, 0x2a, 0x6f, 0xc1, 0x63, 0x75, 0xec, 0xc0, 0xc0, 0x84, 0x50, 0xf2, 0x22, 0x88, 0xfc,
	0x55, 0x2c, 0xa8, 0xdd, 0xee, 0x70, 0xbf, 0xef, 0xe8, 0x1c, 0xff, 0x21, 0x86, 0x75, 0x24, 0x99,
	0xd2, 0x94, 0x71, 0x4b, 0x5f, 0x47, 0x5c, 0x38, 0x36, 0xa2, 0x19, 0x33, 0x4e, 0x39, 0x05, 0x5a,
	0xc4, 0xcb, 0x0c, 0x20, 0x5d, 0x46, 0xa0, 0x9f, 0x55, 0xb2, 0x32, 0xcc, 0x81, 0x26, 0x99, 0x01,
	0x07, 0xc1, 0x05, 0x17, 0x52, 0x18, 0x10, 0x96, 0x34, 0x0a, 0xc2, 0xb8, 0x25, 0xb5, 0xa2, 0x7f,
	0x96, 0x40, 0x02, 0xe5, 0x27, 0xfd, 0xbd, 0x2a, 0xa8, 0x7f, 0xb7, 0x6f, 0x9c, 0x31, 0x2a, 0x06,
	0x53, 0x53, 0x93, 0xfd, 0x28, 0x27, 0x8d, 0xb0, 0x12, 0xd2, 0xb8, 0xc2, 0xae, 0x3e, 0x90, 0x7f,
	0x3e, 0x63, 0xa6, 0xfe, 0x99, 0x01, 0xa4, 0x61, 0x5b, 0x43, 0x81, 0x0e, 0x16, 0x7e, 0xa7, 0x45,
	0x7a, 0x68, 0x80, 0x86, 0xdd, 0xf1, 0x3d, 0xf9, 0xb7, 0x15, 0xf9, 0xab, 0x7b, 0x6c, 0xe8, 0xe9,
	0xc9, 0xe6, 0xeb, 0xd2, 0x9b, 0xef, 0x74, 0xc1, 0x93, 0xdf, 0x09, 0xeb, 0x12, 0xb6, 0x77, 0x34,
	0x38, 0x1e, 0x76, 0xc7, 0x93, 0x83, 0xdc, 0x0d, 0x5d, 0xaa, 0xd1, 0x7c, 0x67, 0x9b, 0x86, 0x9b,
	0x1c, 0xa3, 0x6d, 0x8e, 0xd1, 0x77, 0x8e, 0xd1, 0x7b, 0x81, 0xbd, 0x6d, 0x81, 0xbd, 0xcf, 0x02,
	0x7b, 0x8b, 0xeb, 0x44, 0x39, 0xb9, 0xe2, 0x24, 0x82, 0x17, 0xca, 0xc5, 0x4d, 0x15, 0x46, 0xdb,
	0xf1, 0xd6, 0xe5, 0x7c, 0xee, 0x2d, 0x13, 0x96, 0x9f, 0x96, 0x13, 0xdd, 0xfe, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x0e, 0xcf, 0x39, 0x0d, 0x00, 0x02, 0x00, 0x00,
}

func (m *ParitionedPoolConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParitionedPoolConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParitionedPoolConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Corridors) > 0 {
		for iNdEx := len(m.Corridors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Corridors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPartitionedPoolConfiguraton(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Threshold.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPartitionedPoolConfiguraton(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintPartitionedPoolConfiguraton(dAtA []byte, offset int, v uint64) int {
	offset -= sovPartitionedPoolConfiguraton(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ParitionedPoolConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Threshold.Size()
	n += 1 + l + sovPartitionedPoolConfiguraton(uint64(l))
	if len(m.Corridors) > 0 {
		for _, e := range m.Corridors {
			l = e.Size()
			n += 1 + l + sovPartitionedPoolConfiguraton(uint64(l))
		}
	}
	return n
}

func sovPartitionedPoolConfiguraton(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPartitionedPoolConfiguraton(x uint64) (n int) {
	return sovPartitionedPoolConfiguraton(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ParitionedPoolConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPartitionedPoolConfiguraton
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParitionedPoolConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParitionedPoolConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartitionedPoolConfiguraton
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPartitionedPoolConfiguraton
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPartitionedPoolConfiguraton
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Threshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Corridors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartitionedPoolConfiguraton
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPartitionedPoolConfiguraton
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPartitionedPoolConfiguraton
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Corridors = append(m.Corridors, &ParitionedPoolCorridor{})
			if err := m.Corridors[len(m.Corridors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPartitionedPoolConfiguraton(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPartitionedPoolConfiguraton
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPartitionedPoolConfiguraton(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPartitionedPoolConfiguraton
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPartitionedPoolConfiguraton
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPartitionedPoolConfiguraton
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPartitionedPoolConfiguraton
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPartitionedPoolConfiguraton
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPartitionedPoolConfiguraton
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPartitionedPoolConfiguraton        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPartitionedPoolConfiguraton          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPartitionedPoolConfiguraton = fmt.Errorf("proto: unexpected end of group")
)
