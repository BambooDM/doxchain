// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: doxchain/aml/v1beta1/aml_request.proto

package types

import (
	fmt "fmt"
	types "github.com/be-heroes/doxchain/x/did/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AMLRequest struct {
	Did      types.Did `protobuf:"bytes,1,opt,name=did,proto3" json:"did"`
	Approved bool      `protobuf:"varint,2,opt,name=approved,proto3" json:"approved,omitempty"`
}

func (m *AMLRequest) Reset()         { *m = AMLRequest{} }
func (m *AMLRequest) String() string { return proto.CompactTextString(m) }
func (*AMLRequest) ProtoMessage()    {}
func (*AMLRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bdbab1238e8c155c, []int{0}
}
func (m *AMLRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AMLRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AMLRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AMLRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AMLRequest.Merge(m, src)
}
func (m *AMLRequest) XXX_Size() int {
	return m.Size()
}
func (m *AMLRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AMLRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AMLRequest proto.InternalMessageInfo

func (m *AMLRequest) GetDid() types.Did {
	if m != nil {
		return m.Did
	}
	return types.Did{}
}

func (m *AMLRequest) GetApproved() bool {
	if m != nil {
		return m.Approved
	}
	return false
}

func init() {
	proto.RegisterType((*AMLRequest)(nil), "beheroes.doxchain.aml.v1beta1.AMLRequest")
}

func init() {
	proto.RegisterFile("doxchain/aml/v1beta1/aml_request.proto", fileDescriptor_bdbab1238e8c155c)
}

var fileDescriptor_bdbab1238e8c155c = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4b, 0xc9, 0xaf, 0x48,
	0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x4f, 0xcc, 0xcd, 0xd1, 0x2f, 0x33, 0x4c, 0x4a, 0x2d, 0x49, 0x34,
	0x04, 0xb1, 0xe3, 0x8b, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2,
	0x85, 0x64, 0x93, 0x52, 0x33, 0x52, 0x8b, 0xf2, 0x53, 0x8b, 0xf5, 0x60, 0x1a, 0xf4, 0x12, 0x73,
	0x73, 0xf4, 0xa0, 0x1a, 0xa4, 0x44, 0xd2, 0xf3, 0xd3, 0xf3, 0xc1, 0x2a, 0xf5, 0x41, 0x2c, 0x88,
	0x26, 0x29, 0x39, 0xb8, 0xe1, 0x29, 0x99, 0x29, 0x70, 0xc3, 0x53, 0x32, 0x53, 0x20, 0xf2, 0x4a,
	0x29, 0x5c, 0x5c, 0x8e, 0xbe, 0x3e, 0x41, 0x10, 0x8b, 0x84, 0xac, 0xb8, 0x98, 0x53, 0x32, 0x53,
	0x24, 0x18, 0x15, 0x18, 0x35, 0xb8, 0x8d, 0x94, 0xf4, 0x30, 0x2d, 0x04, 0x69, 0x84, 0x1a, 0xa2,
	0xe7, 0x92, 0x99, 0xe2, 0xc4, 0x72, 0xe2, 0x9e, 0x3c, 0x43, 0x10, 0x48, 0x93, 0x90, 0x14, 0x17,
	0x47, 0x62, 0x41, 0x41, 0x51, 0x7e, 0x59, 0x6a, 0x8a, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x47, 0x10,
	0x9c, 0xef, 0xe4, 0x7c, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31,
	0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x9a, 0xe9,
	0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0x49, 0xa9, 0xba, 0x10, 0xfb, 0xf4,
	0xe1, 0x8e, 0xae, 0x00, 0x87, 0x49, 0x49, 0x65, 0x41, 0x6a, 0x71, 0x12, 0x1b, 0xd8, 0xc5, 0xc6,
	0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfc, 0xf5, 0x4d, 0x2c, 0x30, 0x01, 0x00, 0x00,
}

func (m *AMLRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AMLRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AMLRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Approved {
		i--
		if m.Approved {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Did.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAmlRequest(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintAmlRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovAmlRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AMLRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Did.Size()
	n += 1 + l + sovAmlRequest(uint64(l))
	if m.Approved {
		n += 2
	}
	return n
}

func sovAmlRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAmlRequest(x uint64) (n int) {
	return sovAmlRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AMLRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAmlRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AMLRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AMLRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmlRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAmlRequest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAmlRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Did.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approved", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAmlRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Approved = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAmlRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAmlRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAmlRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAmlRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAmlRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAmlRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAmlRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAmlRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAmlRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAmlRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAmlRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAmlRequest = fmt.Errorf("proto: unexpected end of group")
)
