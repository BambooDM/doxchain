// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: doxchain/idp/tenant_registry.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TenantRegistry struct {
	Creator string         `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Tenants []*TenantEntry `protobuf:"bytes,2,rep,name=tenants,proto3" json:"tenants,omitempty"`
}

func (m *TenantRegistry) Reset()         { *m = TenantRegistry{} }
func (m *TenantRegistry) String() string { return proto.CompactTextString(m) }
func (*TenantRegistry) ProtoMessage()    {}
func (*TenantRegistry) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9a7aaeb8fae848b, []int{0}
}
func (m *TenantRegistry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TenantRegistry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TenantRegistry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TenantRegistry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TenantRegistry.Merge(m, src)
}
func (m *TenantRegistry) XXX_Size() int {
	return m.Size()
}
func (m *TenantRegistry) XXX_DiscardUnknown() {
	xxx_messageInfo_TenantRegistry.DiscardUnknown(m)
}

var xxx_messageInfo_TenantRegistry proto.InternalMessageInfo

func (m *TenantRegistry) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *TenantRegistry) GetTenants() []*TenantEntry {
	if m != nil {
		return m.Tenants
	}
	return nil
}

type TenantEntry struct {
	Identifier       string           `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	AccessClientList AccessClientList `protobuf:"bytes,2,opt,name=accessClientList,proto3" json:"accessClientList"`
}

func (m *TenantEntry) Reset()         { *m = TenantEntry{} }
func (m *TenantEntry) String() string { return proto.CompactTextString(m) }
func (*TenantEntry) ProtoMessage()    {}
func (*TenantEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9a7aaeb8fae848b, []int{1}
}
func (m *TenantEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TenantEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TenantEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TenantEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TenantEntry.Merge(m, src)
}
func (m *TenantEntry) XXX_Size() int {
	return m.Size()
}
func (m *TenantEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_TenantEntry.DiscardUnknown(m)
}

var xxx_messageInfo_TenantEntry proto.InternalMessageInfo

func (m *TenantEntry) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *TenantEntry) GetAccessClientList() AccessClientList {
	if m != nil {
		return m.AccessClientList
	}
	return AccessClientList{}
}

func init() {
	proto.RegisterType((*TenantRegistry)(nil), "beheroes.doxchain.idp.TenantRegistry")
	proto.RegisterType((*TenantEntry)(nil), "beheroes.doxchain.idp.TenantEntry")
}

func init() {
	proto.RegisterFile("doxchain/idp/tenant_registry.proto", fileDescriptor_e9a7aaeb8fae848b)
}

var fileDescriptor_e9a7aaeb8fae848b = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x3d, 0x4b, 0xc4, 0x30,
	0x18, 0xc7, 0x9b, 0x53, 0x3c, 0x4c, 0x41, 0xa4, 0x28, 0x94, 0x1b, 0x62, 0x29, 0x88, 0x75, 0x30,
	0x85, 0x73, 0x75, 0xf1, 0x0e, 0x37, 0xa7, 0xe2, 0xa2, 0x4b, 0x69, 0xd3, 0xc7, 0x36, 0x70, 0x26,
	0x25, 0x89, 0x70, 0xfd, 0x06, 0x8e, 0x7e, 0xac, 0x1b, 0x6f, 0x74, 0x12, 0x69, 0xbf, 0x88, 0xd8,
	0x58, 0x39, 0xdf, 0xb6, 0xbc, 0xfc, 0xf2, 0xff, 0xfd, 0x79, 0x82, 0xc3, 0x42, 0x2e, 0x59, 0x95,
	0x71, 0x11, 0xf3, 0xa2, 0x8e, 0x0d, 0x88, 0x4c, 0x98, 0x54, 0x41, 0xc9, 0xb5, 0x51, 0x0d, 0xad,
	0x95, 0x34, 0xd2, 0x3b, 0xcc, 0xa1, 0x02, 0x25, 0x41, 0xd3, 0x01, 0xa6, 0xbc, 0xa8, 0x27, 0x07,
	0xa5, 0x2c, 0x65, 0x4f, 0xc4, 0x1f, 0x2b, 0x0b, 0x4f, 0x8e, 0xbf, 0x05, 0x66, 0x8c, 0x81, 0xd6,
	0x29, 0x5b, 0x70, 0x10, 0x26, 0x5d, 0x70, 0x6d, 0x2c, 0x16, 0x56, 0x78, 0xef, 0xa6, 0x97, 0x25,
	0x9f, 0x2e, 0xcf, 0xc7, 0x63, 0xa6, 0x20, 0x33, 0x52, 0xf9, 0x28, 0x40, 0xd1, 0x6e, 0x32, 0x6c,
	0xbd, 0x0b, 0x3c, 0xb6, 0xc5, 0xb4, 0x3f, 0x0a, 0xb6, 0x22, 0x77, 0x1a, 0xd2, 0x3f, 0x1b, 0x51,
	0x9b, 0x78, 0x25, 0x8c, 0x6a, 0x92, 0xe1, 0x49, 0xf8, 0x84, 0xb0, 0xbb, 0x71, 0xe1, 0x11, 0x8c,
	0x79, 0x01, 0xc2, 0xf0, 0x7b, 0x0e, 0x83, 0x6a, 0xe3, 0xc4, 0xbb, 0xc5, 0xfb, 0xb6, 0xf5, 0xbc,
	0x2f, 0x7d, 0xcd, 0xb5, 0xf1, 0x47, 0x01, 0x8a, 0xdc, 0xe9, 0xc9, 0x3f, 0xda, 0xcb, 0x1f, 0xf8,
	0x6c, 0x7b, 0xf5, 0x7a, 0xe4, 0x24, 0xbf, 0x62, 0x66, 0xf3, 0x55, 0x4b, 0xd0, 0xba, 0x25, 0xe8,
	0xad, 0x25, 0xe8, 0xb9, 0x23, 0xce, 0xba, 0x23, 0xce, 0x4b, 0x47, 0x9c, 0xbb, 0xd3, 0x92, 0x9b,
	0xea, 0x31, 0xa7, 0x4c, 0x3e, 0xc4, 0x39, 0x9c, 0x59, 0x4b, 0xfc, 0x35, 0xca, 0xa5, 0xfd, 0x9d,
	0xa6, 0x06, 0x9d, 0xef, 0xf4, 0x03, 0x3c, 0x7f, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x47, 0xd5,
	0x2b, 0xba, 0x01, 0x00, 0x00,
}

func (m *TenantRegistry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantRegistry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TenantRegistry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tenants) > 0 {
		for iNdEx := len(m.Tenants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tenants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTenantRegistry(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTenantRegistry(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TenantEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TenantEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AccessClientList.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTenantRegistry(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintTenantRegistry(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTenantRegistry(dAtA []byte, offset int, v uint64) int {
	offset -= sovTenantRegistry(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TenantRegistry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTenantRegistry(uint64(l))
	}
	if len(m.Tenants) > 0 {
		for _, e := range m.Tenants {
			l = e.Size()
			n += 1 + l + sovTenantRegistry(uint64(l))
		}
	}
	return n
}

func (m *TenantEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovTenantRegistry(uint64(l))
	}
	l = m.AccessClientList.Size()
	n += 1 + l + sovTenantRegistry(uint64(l))
	return n
}

func sovTenantRegistry(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTenantRegistry(x uint64) (n int) {
	return sovTenantRegistry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TenantRegistry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenantRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantRegistry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantRegistry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenantRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTenantRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTenantRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenantRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenantRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenantRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenants = append(m.Tenants, &TenantEntry{})
			if err := m.Tenants[len(m.Tenants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenantRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTenantRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenantRegistry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenantRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTenantRegistry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTenantRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessClientList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenantRegistry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenantRegistry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenantRegistry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AccessClientList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenantRegistry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTenantRegistry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTenantRegistry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTenantRegistry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTenantRegistry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTenantRegistry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTenantRegistry
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTenantRegistry
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTenantRegistry
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTenantRegistry        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTenantRegistry          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTenantRegistry = fmt.Errorf("proto: unexpected end of group")
)
