// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: doxchain/idp/v1beta1/device_code_registry_entry.proto

package types

import (
	fmt "fmt"
	types "github.com/be-heroes/doxchain/x/did/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DeviceCodeRegistryEntry struct {
	Owner      types.Did `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner"`
	DeviceCode string    `protobuf:"bytes,2,opt,name=deviceCode,proto3" json:"deviceCode,omitempty"`
	UserCode   string    `protobuf:"bytes,3,opt,name=userCode,proto3" json:"userCode,omitempty"`
	ExpiresAt  int64     `protobuf:"varint,4,opt,name=expiresAt,proto3" json:"expiresAt,omitempty"`
}

func (m *DeviceCodeRegistryEntry) Reset()         { *m = DeviceCodeRegistryEntry{} }
func (m *DeviceCodeRegistryEntry) String() string { return proto.CompactTextString(m) }
func (*DeviceCodeRegistryEntry) ProtoMessage()    {}
func (*DeviceCodeRegistryEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ffb981ec2eb76aa, []int{0}
}
func (m *DeviceCodeRegistryEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceCodeRegistryEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceCodeRegistryEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceCodeRegistryEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceCodeRegistryEntry.Merge(m, src)
}
func (m *DeviceCodeRegistryEntry) XXX_Size() int {
	return m.Size()
}
func (m *DeviceCodeRegistryEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceCodeRegistryEntry.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceCodeRegistryEntry proto.InternalMessageInfo

func (m *DeviceCodeRegistryEntry) GetOwner() types.Did {
	if m != nil {
		return m.Owner
	}
	return types.Did{}
}

func (m *DeviceCodeRegistryEntry) GetDeviceCode() string {
	if m != nil {
		return m.DeviceCode
	}
	return ""
}

func (m *DeviceCodeRegistryEntry) GetUserCode() string {
	if m != nil {
		return m.UserCode
	}
	return ""
}

func (m *DeviceCodeRegistryEntry) GetExpiresAt() int64 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

func init() {
	proto.RegisterType((*DeviceCodeRegistryEntry)(nil), "doxchain.idp.v1beta1.DeviceCodeRegistryEntry")
}

func init() {
	proto.RegisterFile("doxchain/idp/v1beta1/device_code_registry_entry.proto", fileDescriptor_0ffb981ec2eb76aa)
}

var fileDescriptor_0ffb981ec2eb76aa = []byte{
	// 285 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x41, 0x4e, 0xf3, 0x30,
	0x10, 0x85, 0xe3, 0xbf, 0xfd, 0x11, 0x35, 0xbb, 0xa8, 0x12, 0xa5, 0x42, 0x26, 0x62, 0x15, 0x16,
	0xd8, 0x2a, 0xa8, 0x07, 0xa0, 0x2d, 0x17, 0xc8, 0x92, 0x4d, 0xd4, 0x64, 0x46, 0x89, 0x17, 0xc4,
	0x91, 0xe3, 0x96, 0xe4, 0x16, 0x9c, 0x83, 0x93, 0x74, 0xd9, 0x25, 0x2b, 0x84, 0x92, 0x8b, 0xa0,
	0x38, 0x21, 0x65, 0x67, 0xcf, 0x7b, 0x6f, 0x3e, 0xbd, 0xa1, 0x4b, 0x50, 0x65, 0x9c, 0x6e, 0x65,
	0x26, 0x24, 0xe4, 0x62, 0xbf, 0x88, 0xd0, 0x6c, 0x17, 0x02, 0x70, 0x2f, 0x63, 0x0c, 0x63, 0x05,
	0x18, 0x6a, 0x4c, 0x64, 0x61, 0x74, 0x15, 0x62, 0x66, 0x74, 0xc5, 0x73, 0xad, 0x8c, 0x72, 0xa7,
	0xbf, 0x31, 0x2e, 0x21, 0xe7, 0x7d, 0x6c, 0x3e, 0x4d, 0x54, 0xa2, 0xac, 0x41, 0xb4, 0xaf, 0xce,
	0x3b, 0x67, 0x03, 0x02, 0x24, 0x9c, 0x10, 0x12, 0x3a, 0xfd, 0xf6, 0x83, 0xd0, 0xcb, 0x8d, 0x05,
	0xae, 0x15, 0x60, 0xd0, 0xe3, 0x9e, 0x5b, 0x9a, 0xbb, 0xa4, 0xff, 0xd5, 0x5b, 0x86, 0x7a, 0x46,
	0x3c, 0xe2, 0x5f, 0x3c, 0x5c, 0xf1, 0x81, 0xdb, 0xe6, 0xfb, 0x5d, 0x7c, 0x23, 0x61, 0x35, 0x3e,
	0x7c, 0xdd, 0x38, 0x41, 0xe7, 0x76, 0x19, 0xa5, 0x30, 0x6c, 0x9c, 0xfd, 0xf3, 0x88, 0x3f, 0x09,
	0xfe, 0x4c, 0xdc, 0x39, 0x3d, 0xdf, 0x15, 0xa8, 0xad, 0x3a, 0xb2, 0xea, 0xf0, 0x77, 0xaf, 0xe9,
	0x04, 0xcb, 0x5c, 0x6a, 0x2c, 0x9e, 0xcc, 0x6c, 0xec, 0x11, 0x7f, 0x14, 0x9c, 0x06, 0xab, 0xf5,
	0xa1, 0x66, 0xe4, 0x58, 0x33, 0xf2, 0x5d, 0x33, 0xf2, 0xde, 0x30, 0xe7, 0xd8, 0x30, 0xe7, 0xb3,
	0x61, 0xce, 0xcb, 0x5d, 0x22, 0x4d, 0xba, 0x8b, 0x78, 0xac, 0x5e, 0x45, 0x84, 0xf7, 0x29, 0x6a,
	0x85, 0x85, 0x18, 0xba, 0x97, 0xf6, 0xc0, 0xa6, 0xca, 0xb1, 0x88, 0xce, 0x6c, 0xf1, 0xc7, 0x9f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x18, 0x56, 0x49, 0x51, 0x7d, 0x01, 0x00, 0x00,
}

func (m *DeviceCodeRegistryEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceCodeRegistryEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceCodeRegistryEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpiresAt != 0 {
		i = encodeVarintDeviceCodeRegistryEntry(dAtA, i, uint64(m.ExpiresAt))
		i--
		dAtA[i] = 0x20
	}
	if len(m.UserCode) > 0 {
		i -= len(m.UserCode)
		copy(dAtA[i:], m.UserCode)
		i = encodeVarintDeviceCodeRegistryEntry(dAtA, i, uint64(len(m.UserCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DeviceCode) > 0 {
		i -= len(m.DeviceCode)
		copy(dAtA[i:], m.DeviceCode)
		i = encodeVarintDeviceCodeRegistryEntry(dAtA, i, uint64(len(m.DeviceCode)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDeviceCodeRegistryEntry(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintDeviceCodeRegistryEntry(dAtA []byte, offset int, v uint64) int {
	offset -= sovDeviceCodeRegistryEntry(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DeviceCodeRegistryEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Owner.Size()
	n += 1 + l + sovDeviceCodeRegistryEntry(uint64(l))
	l = len(m.DeviceCode)
	if l > 0 {
		n += 1 + l + sovDeviceCodeRegistryEntry(uint64(l))
	}
	l = len(m.UserCode)
	if l > 0 {
		n += 1 + l + sovDeviceCodeRegistryEntry(uint64(l))
	}
	if m.ExpiresAt != 0 {
		n += 1 + sovDeviceCodeRegistryEntry(uint64(m.ExpiresAt))
	}
	return n
}

func sovDeviceCodeRegistryEntry(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDeviceCodeRegistryEntry(x uint64) (n int) {
	return sovDeviceCodeRegistryEntry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DeviceCodeRegistryEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeviceCodeRegistryEntry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceCodeRegistryEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceCodeRegistryEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceCodeRegistryEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeviceCodeRegistryEntry
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceCodeRegistryEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceCodeRegistryEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceCodeRegistryEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceCodeRegistryEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceCodeRegistryEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeviceCodeRegistryEntry
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeviceCodeRegistryEntry
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeviceCodeRegistryEntry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDeviceCodeRegistryEntry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeviceCodeRegistryEntry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDeviceCodeRegistryEntry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDeviceCodeRegistryEntry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeviceCodeRegistryEntry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeviceCodeRegistryEntry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDeviceCodeRegistryEntry
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDeviceCodeRegistryEntry
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDeviceCodeRegistryEntry
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDeviceCodeRegistryEntry        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDeviceCodeRegistryEntry          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDeviceCodeRegistryEntry = fmt.Errorf("proto: unexpected end of group")
)
