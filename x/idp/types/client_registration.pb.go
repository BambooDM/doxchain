// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: doxchain/idp/v1beta1/client_registration.proto

package types

import (
	fmt "fmt"
	types "github.com/be-heroes/doxchain/x/did/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClientRegistration struct {
	Id                         types.Did         `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	AppId                      types.Did         `protobuf:"bytes,2,opt,name=appId,proto3" json:"appId"`
	Name                       string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ClientId                   string            `protobuf:"bytes,4,opt,name=clientId,proto3" json:"clientId,omitempty"`
	AppRoles                   []string          `protobuf:"bytes,5,rep,name=appRoles,proto3" json:"appRoles,omitempty"`
	AppScopes                  []string          `protobuf:"bytes,6,rep,name=appScopes,proto3" json:"appScopes,omitempty"`
	AccessTokenAcceptedVersion uint32            `protobuf:"varint,7,opt,name=accessTokenAcceptedVersion,proto3" json:"accessTokenAcceptedVersion,omitempty"`
	AllowPublicClient          uint32            `protobuf:"varint,8,opt,name=allowPublicClient,proto3" json:"allowPublicClient,omitempty"`
	ReplyUrls                  []string          `protobuf:"bytes,9,rep,name=replyUrls,proto3" json:"replyUrls,omitempty"`
	Tags                       []string          `protobuf:"bytes,10,rep,name=tags,proto3" json:"tags,omitempty"`
	AccessClientList           *AccessClientList `protobuf:"bytes,11,opt,name=accessClientList,proto3" json:"accessClientList,omitempty"`
}

func (m *ClientRegistration) Reset()         { *m = ClientRegistration{} }
func (m *ClientRegistration) String() string { return proto.CompactTextString(m) }
func (*ClientRegistration) ProtoMessage()    {}
func (*ClientRegistration) Descriptor() ([]byte, []int) {
	return fileDescriptor_8f9927dadc165d67, []int{0}
}
func (m *ClientRegistration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientRegistration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientRegistration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientRegistration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientRegistration.Merge(m, src)
}
func (m *ClientRegistration) XXX_Size() int {
	return m.Size()
}
func (m *ClientRegistration) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientRegistration.DiscardUnknown(m)
}

var xxx_messageInfo_ClientRegistration proto.InternalMessageInfo

func (m *ClientRegistration) GetId() types.Did {
	if m != nil {
		return m.Id
	}
	return types.Did{}
}

func (m *ClientRegistration) GetAppId() types.Did {
	if m != nil {
		return m.AppId
	}
	return types.Did{}
}

func (m *ClientRegistration) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClientRegistration) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *ClientRegistration) GetAppRoles() []string {
	if m != nil {
		return m.AppRoles
	}
	return nil
}

func (m *ClientRegistration) GetAppScopes() []string {
	if m != nil {
		return m.AppScopes
	}
	return nil
}

func (m *ClientRegistration) GetAccessTokenAcceptedVersion() uint32 {
	if m != nil {
		return m.AccessTokenAcceptedVersion
	}
	return 0
}

func (m *ClientRegistration) GetAllowPublicClient() uint32 {
	if m != nil {
		return m.AllowPublicClient
	}
	return 0
}

func (m *ClientRegistration) GetReplyUrls() []string {
	if m != nil {
		return m.ReplyUrls
	}
	return nil
}

func (m *ClientRegistration) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ClientRegistration) GetAccessClientList() *AccessClientList {
	if m != nil {
		return m.AccessClientList
	}
	return nil
}

func init() {
	proto.RegisterType((*ClientRegistration)(nil), "beheroes.doxchain.idp.v1beta1.ClientRegistration")
}

func init() {
	proto.RegisterFile("doxchain/idp/v1beta1/client_registration.proto", fileDescriptor_8f9927dadc165d67)
}

var fileDescriptor_8f9927dadc165d67 = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x3d, 0x6f, 0x14, 0x31,
	0x10, 0x3d, 0xdf, 0x5d, 0x42, 0xce, 0x11, 0x12, 0x58, 0x14, 0xd6, 0x09, 0x96, 0x55, 0xaa, 0x43,
	0x22, 0x5e, 0x05, 0x1a, 0xaa, 0x48, 0x49, 0x68, 0x22, 0x51, 0xa0, 0xe5, 0xa3, 0xa0, 0x89, 0xbc,
	0xf6, 0x68, 0x6f, 0x84, 0xb3, 0xb6, 0xd6, 0x0e, 0x24, 0xff, 0x82, 0x9f, 0x95, 0x32, 0x25, 0x15,
	0x42, 0x77, 0x3f, 0x83, 0x06, 0xad, 0xbd, 0x2c, 0x88, 0x43, 0x91, 0xe8, 0xc6, 0xf3, 0xe6, 0xcd,
	0x7b, 0x1e, 0x3d, 0x2a, 0xb4, 0xbd, 0x54, 0x4b, 0x89, 0x4d, 0x81, 0xda, 0x15, 0x9f, 0x0e, 0x2a,
	0x08, 0xf2, 0xa0, 0x50, 0x06, 0xa1, 0x09, 0x67, 0x2d, 0xd4, 0xe8, 0x43, 0x2b, 0x03, 0xda, 0x46,
	0xb8, 0xd6, 0x06, 0xcb, 0x1e, 0x55, 0xb0, 0x84, 0xd6, 0x82, 0x1f, 0x88, 0x02, 0xb5, 0x13, 0x3d,
	0x71, 0xfe, 0xa0, 0xb6, 0xb5, 0x8d, 0x93, 0x45, 0x57, 0x25, 0xd2, 0x3c, 0x1b, 0x44, 0x34, 0xea,
	0x41, 0x44, 0xa3, 0xee, 0xf1, 0xfd, 0x7f, 0x9a, 0x90, 0x4a, 0x81, 0xf7, 0x67, 0xbd, 0x17, 0x83,
	0x3e, 0xa4, 0xf1, 0xbd, 0x1f, 0x13, 0xca, 0x4e, 0x62, 0xb7, 0xfc, 0xc3, 0x20, 0x7b, 0x41, 0xc7,
	0xa8, 0x39, 0xc9, 0xc9, 0x62, 0xf7, 0xd9, 0x9e, 0xd8, 0xf4, 0xd9, 0xe9, 0xf5, 0xbb, 0xc5, 0x4b,
	0xd4, 0xc7, 0xd3, 0xeb, 0x6f, 0x8f, 0x47, 0xe5, 0x18, 0x35, 0x3b, 0xa4, 0x5b, 0xd2, 0xb9, 0x53,
	0xcd, 0xc7, 0xff, 0x49, 0x4e, 0x34, 0xc6, 0xe8, 0xb4, 0x91, 0xe7, 0xc0, 0x27, 0x39, 0x59, 0xcc,
	0xca, 0x58, 0xb3, 0x39, 0xdd, 0x49, 0xce, 0x4f, 0x35, 0x9f, 0xc6, 0xfe, 0xf0, 0xee, 0x30, 0xe9,
	0x5c, 0x69, 0x0d, 0x78, 0xbe, 0x95, 0x4f, 0x3a, 0xec, 0xd7, 0x9b, 0x3d, 0xa4, 0x33, 0xe9, 0xdc,
	0x1b, 0x65, 0x1d, 0x78, 0xbe, 0x1d, 0xc1, 0xdf, 0x0d, 0x76, 0x48, 0xe7, 0xe9, 0x2c, 0x6f, 0xed,
	0x47, 0x68, 0x8e, 0x94, 0x02, 0x17, 0x40, 0xbf, 0x87, 0xd6, 0xa3, 0x6d, 0xf8, 0x9d, 0x9c, 0x2c,
	0xee, 0x96, 0xb7, 0x4c, 0xb0, 0xa7, 0xf4, 0xbe, 0x34, 0xc6, 0x7e, 0x7e, 0x7d, 0x51, 0x19, 0x54,
	0xe9, 0x88, 0x7c, 0x27, 0xd2, 0x36, 0x81, 0xce, 0x4b, 0x0b, 0xce, 0x5c, 0xbd, 0x6b, 0x8d, 0xe7,
	0xb3, 0xe4, 0x65, 0x68, 0x74, 0xbf, 0x0e, 0xb2, 0xf6, 0x9c, 0x46, 0x20, 0xd6, 0x4c, 0xd2, 0x7b,
	0x49, 0x3d, 0x6d, 0x78, 0x85, 0x3e, 0xf0, 0xdd, 0x78, 0xd4, 0x42, 0xdc, 0x9a, 0x1c, 0x71, 0xf4,
	0x17, 0x2d, 0x5e, 0x98, 0x94, 0x1b, 0xeb, 0x8e, 0x4f, 0xae, 0x57, 0x19, 0xb9, 0x59, 0x65, 0xe4,
	0xfb, 0x2a, 0x23, 0x5f, 0xd6, 0xd9, 0xe8, 0x66, 0x9d, 0x8d, 0xbe, 0xae, 0xb3, 0xd1, 0x87, 0x27,
	0x35, 0x86, 0xe5, 0x45, 0x25, 0x94, 0x3d, 0x2f, 0x2a, 0xd8, 0x4f, 0x6a, 0xc5, 0x90, 0xad, 0xcb,
	0x98, 0xae, 0x70, 0xe5, 0xc0, 0x57, 0xdb, 0x31, 0x49, 0xcf, 0x7f, 0x06, 0x00, 0x00, 0xff, 0xff,
	0x88, 0x90, 0x3f, 0xca, 0xff, 0x02, 0x00, 0x00,
}

func (m *ClientRegistration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientRegistration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientRegistration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccessClientList != nil {
		{
			size, err := m.AccessClientList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClientRegistration(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintClientRegistration(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.ReplyUrls) > 0 {
		for iNdEx := len(m.ReplyUrls) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ReplyUrls[iNdEx])
			copy(dAtA[i:], m.ReplyUrls[iNdEx])
			i = encodeVarintClientRegistration(dAtA, i, uint64(len(m.ReplyUrls[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.AllowPublicClient != 0 {
		i = encodeVarintClientRegistration(dAtA, i, uint64(m.AllowPublicClient))
		i--
		dAtA[i] = 0x40
	}
	if m.AccessTokenAcceptedVersion != 0 {
		i = encodeVarintClientRegistration(dAtA, i, uint64(m.AccessTokenAcceptedVersion))
		i--
		dAtA[i] = 0x38
	}
	if len(m.AppScopes) > 0 {
		for iNdEx := len(m.AppScopes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AppScopes[iNdEx])
			copy(dAtA[i:], m.AppScopes[iNdEx])
			i = encodeVarintClientRegistration(dAtA, i, uint64(len(m.AppScopes[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.AppRoles) > 0 {
		for iNdEx := len(m.AppRoles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AppRoles[iNdEx])
			copy(dAtA[i:], m.AppRoles[iNdEx])
			i = encodeVarintClientRegistration(dAtA, i, uint64(len(m.AppRoles[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintClientRegistration(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintClientRegistration(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.AppId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClientRegistration(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClientRegistration(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintClientRegistration(dAtA []byte, offset int, v uint64) int {
	offset -= sovClientRegistration(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClientRegistration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Id.Size()
	n += 1 + l + sovClientRegistration(uint64(l))
	l = m.AppId.Size()
	n += 1 + l + sovClientRegistration(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClientRegistration(uint64(l))
	}
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovClientRegistration(uint64(l))
	}
	if len(m.AppRoles) > 0 {
		for _, s := range m.AppRoles {
			l = len(s)
			n += 1 + l + sovClientRegistration(uint64(l))
		}
	}
	if len(m.AppScopes) > 0 {
		for _, s := range m.AppScopes {
			l = len(s)
			n += 1 + l + sovClientRegistration(uint64(l))
		}
	}
	if m.AccessTokenAcceptedVersion != 0 {
		n += 1 + sovClientRegistration(uint64(m.AccessTokenAcceptedVersion))
	}
	if m.AllowPublicClient != 0 {
		n += 1 + sovClientRegistration(uint64(m.AllowPublicClient))
	}
	if len(m.ReplyUrls) > 0 {
		for _, s := range m.ReplyUrls {
			l = len(s)
			n += 1 + l + sovClientRegistration(uint64(l))
		}
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovClientRegistration(uint64(l))
		}
	}
	if m.AccessClientList != nil {
		l = m.AccessClientList.Size()
		n += 1 + l + sovClientRegistration(uint64(l))
	}
	return n
}

func sovClientRegistration(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClientRegistration(x uint64) (n int) {
	return sovClientRegistration(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClientRegistration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientRegistration
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientRegistration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientRegistration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientRegistration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientRegistration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientRegistration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientRegistration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AppId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientRegistration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientRegistration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientRegistration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientRegistration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppRoles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientRegistration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientRegistration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppRoles = append(m.AppRoles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppScopes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientRegistration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientRegistration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppScopes = append(m.AppScopes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessTokenAcceptedVersion", wireType)
			}
			m.AccessTokenAcceptedVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessTokenAcceptedVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowPublicClient", wireType)
			}
			m.AllowPublicClient = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllowPublicClient |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyUrls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientRegistration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientRegistration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyUrls = append(m.ReplyUrls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientRegistration
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientRegistration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessClientList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientRegistration
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClientRegistration
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClientRegistration
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccessClientList == nil {
				m.AccessClientList = &AccessClientList{}
			}
			if err := m.AccessClientList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientRegistration(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClientRegistration
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClientRegistration(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClientRegistration
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientRegistration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientRegistration
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClientRegistration
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClientRegistration
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClientRegistration
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClientRegistration        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClientRegistration          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClientRegistration = fmt.Errorf("proto: unexpected end of group")
)
