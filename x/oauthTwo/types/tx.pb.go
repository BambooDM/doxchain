// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: doxchain/oauthtwo/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgTokenRequest struct {
	Creator             string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Tenant              string `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Scope               string `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	GrantType           string `protobuf:"bytes,4,opt,name=grantType,proto3" json:"grantType,omitempty"`
	ClientId            string `protobuf:"bytes,5,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ClientSecret        string `protobuf:"bytes,6,opt,name=clientSecret,proto3" json:"clientSecret,omitempty"`
	DeviceCode          string `protobuf:"bytes,7,opt,name=deviceCode,proto3" json:"deviceCode,omitempty"`
	ClientAssertionType string `protobuf:"bytes,8,opt,name=clientAssertionType,proto3" json:"clientAssertionType,omitempty"`
	ClientAssertion     string `protobuf:"bytes,9,opt,name=clientAssertion,proto3" json:"clientAssertion,omitempty"`
}

func (m *MsgTokenRequest) Reset()         { *m = MsgTokenRequest{} }
func (m *MsgTokenRequest) String() string { return proto.CompactTextString(m) }
func (*MsgTokenRequest) ProtoMessage()    {}
func (*MsgTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_95bbac7de3c28a3c, []int{0}
}
func (m *MsgTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTokenRequest.Merge(m, src)
}
func (m *MsgTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTokenRequest proto.InternalMessageInfo

func (m *MsgTokenRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTokenRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *MsgTokenRequest) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *MsgTokenRequest) GetGrantType() string {
	if m != nil {
		return m.GrantType
	}
	return ""
}

func (m *MsgTokenRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *MsgTokenRequest) GetClientSecret() string {
	if m != nil {
		return m.ClientSecret
	}
	return ""
}

func (m *MsgTokenRequest) GetDeviceCode() string {
	if m != nil {
		return m.DeviceCode
	}
	return ""
}

func (m *MsgTokenRequest) GetClientAssertionType() string {
	if m != nil {
		return m.ClientAssertionType
	}
	return ""
}

func (m *MsgTokenRequest) GetClientAssertion() string {
	if m != nil {
		return m.ClientAssertion
	}
	return ""
}

type MsgTokenResponse struct {
	AccessToken string `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	TokenType   string `protobuf:"bytes,2,opt,name=tokenType,proto3" json:"tokenType,omitempty"`
	ExpiresIn   int64  `protobuf:"varint,3,opt,name=expiresIn,proto3" json:"expiresIn,omitempty"`
}

func (m *MsgTokenResponse) Reset()         { *m = MsgTokenResponse{} }
func (m *MsgTokenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTokenResponse) ProtoMessage()    {}
func (*MsgTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_95bbac7de3c28a3c, []int{1}
}
func (m *MsgTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTokenResponse.Merge(m, src)
}
func (m *MsgTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTokenResponse proto.InternalMessageInfo

func (m *MsgTokenResponse) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *MsgTokenResponse) GetTokenType() string {
	if m != nil {
		return m.TokenType
	}
	return ""
}

func (m *MsgTokenResponse) GetExpiresIn() int64 {
	if m != nil {
		return m.ExpiresIn
	}
	return 0
}

type MsgDeviceCodeRequest struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Tenant   string `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	ClientId string `protobuf:"bytes,3,opt,name=clientId,proto3" json:"clientId,omitempty"`
	Scope    string `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (m *MsgDeviceCodeRequest) Reset()         { *m = MsgDeviceCodeRequest{} }
func (m *MsgDeviceCodeRequest) String() string { return proto.CompactTextString(m) }
func (*MsgDeviceCodeRequest) ProtoMessage()    {}
func (*MsgDeviceCodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_95bbac7de3c28a3c, []int{2}
}
func (m *MsgDeviceCodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeviceCodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeviceCodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeviceCodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeviceCodeRequest.Merge(m, src)
}
func (m *MsgDeviceCodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeviceCodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeviceCodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeviceCodeRequest proto.InternalMessageInfo

func (m *MsgDeviceCodeRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDeviceCodeRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *MsgDeviceCodeRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *MsgDeviceCodeRequest) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

type MsgDeviceCodeResponse struct {
	DeviceCode      string `protobuf:"bytes,1,opt,name=deviceCode,proto3" json:"deviceCode,omitempty"`
	UserCode        string `protobuf:"bytes,2,opt,name=userCode,proto3" json:"userCode,omitempty"`
	VerificationUri string `protobuf:"bytes,3,opt,name=verification_uri,json=verificationUri,proto3" json:"verification_uri,omitempty"`
}

func (m *MsgDeviceCodeResponse) Reset()         { *m = MsgDeviceCodeResponse{} }
func (m *MsgDeviceCodeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeviceCodeResponse) ProtoMessage()    {}
func (*MsgDeviceCodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_95bbac7de3c28a3c, []int{3}
}
func (m *MsgDeviceCodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeviceCodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeviceCodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeviceCodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeviceCodeResponse.Merge(m, src)
}
func (m *MsgDeviceCodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeviceCodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeviceCodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeviceCodeResponse proto.InternalMessageInfo

func (m *MsgDeviceCodeResponse) GetDeviceCode() string {
	if m != nil {
		return m.DeviceCode
	}
	return ""
}

func (m *MsgDeviceCodeResponse) GetUserCode() string {
	if m != nil {
		return m.UserCode
	}
	return ""
}

func (m *MsgDeviceCodeResponse) GetVerificationUri() string {
	if m != nil {
		return m.VerificationUri
	}
	return ""
}

type MsgAuthorizeRequest struct {
	Creator  string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Tenant   string `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
	ClientId string `protobuf:"bytes,3,opt,name=clientId,proto3" json:"clientId,omitempty"`
	Scope    string `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
}

func (m *MsgAuthorizeRequest) Reset()         { *m = MsgAuthorizeRequest{} }
func (m *MsgAuthorizeRequest) String() string { return proto.CompactTextString(m) }
func (*MsgAuthorizeRequest) ProtoMessage()    {}
func (*MsgAuthorizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_95bbac7de3c28a3c, []int{4}
}
func (m *MsgAuthorizeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAuthorizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAuthorizeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAuthorizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAuthorizeRequest.Merge(m, src)
}
func (m *MsgAuthorizeRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAuthorizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAuthorizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAuthorizeRequest proto.InternalMessageInfo

func (m *MsgAuthorizeRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAuthorizeRequest) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *MsgAuthorizeRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *MsgAuthorizeRequest) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

type MsgAuthorizeResponse struct {
	AuthorizationCode string `protobuf:"bytes,1,opt,name=authorizationCode,proto3" json:"authorizationCode,omitempty"`
}

func (m *MsgAuthorizeResponse) Reset()         { *m = MsgAuthorizeResponse{} }
func (m *MsgAuthorizeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAuthorizeResponse) ProtoMessage()    {}
func (*MsgAuthorizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_95bbac7de3c28a3c, []int{5}
}
func (m *MsgAuthorizeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAuthorizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAuthorizeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAuthorizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAuthorizeResponse.Merge(m, src)
}
func (m *MsgAuthorizeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAuthorizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAuthorizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAuthorizeResponse proto.InternalMessageInfo

func (m *MsgAuthorizeResponse) GetAuthorizationCode() string {
	if m != nil {
		return m.AuthorizationCode
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgTokenRequest)(nil), "beheroes.doxchain.oauthtwo.MsgTokenRequest")
	proto.RegisterType((*MsgTokenResponse)(nil), "beheroes.doxchain.oauthtwo.MsgTokenResponse")
	proto.RegisterType((*MsgDeviceCodeRequest)(nil), "beheroes.doxchain.oauthtwo.MsgDeviceCodeRequest")
	proto.RegisterType((*MsgDeviceCodeResponse)(nil), "beheroes.doxchain.oauthtwo.MsgDeviceCodeResponse")
	proto.RegisterType((*MsgAuthorizeRequest)(nil), "beheroes.doxchain.oauthtwo.MsgAuthorizeRequest")
	proto.RegisterType((*MsgAuthorizeResponse)(nil), "beheroes.doxchain.oauthtwo.MsgAuthorizeResponse")
}

func init() { proto.RegisterFile("doxchain/oauthtwo/tx.proto", fileDescriptor_95bbac7de3c28a3c) }

var fileDescriptor_95bbac7de3c28a3c = []byte{
	// 535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x8d, 0x93, 0x26, 0x4d, 0x06, 0xa4, 0x94, 0x6d, 0x41, 0x96, 0x85, 0xac, 0xca, 0xa7, 0x22,
	0x8a, 0x53, 0xe8, 0x17, 0x14, 0x72, 0xa0, 0x87, 0x5c, 0x42, 0xb9, 0x70, 0xa9, 0x9c, 0xcd, 0xe0,
	0xac, 0x80, 0x5d, 0x77, 0x77, 0x5d, 0x92, 0x1e, 0xf8, 0x06, 0xfe, 0x85, 0x9f, 0xe0, 0xc0, 0xa1,
	0x47, 0x8e, 0x28, 0xf9, 0x11, 0xe4, 0x5d, 0xc7, 0x71, 0x1c, 0x50, 0x0b, 0x87, 0x9e, 0xec, 0x79,
	0x6f, 0x66, 0x77, 0xe6, 0xcd, 0xcc, 0x82, 0x37, 0x16, 0x53, 0x3a, 0x89, 0x18, 0xef, 0x89, 0x28,
	0xd5, 0x13, 0xfd, 0x59, 0xf4, 0xf4, 0x34, 0x4c, 0xa4, 0xd0, 0x82, 0x78, 0x23, 0x9c, 0xa0, 0x14,
	0xa8, 0xc2, 0xa5, 0x53, 0xb8, 0x74, 0xf2, 0x8e, 0x37, 0xe3, 0xb2, 0xaf, 0x90, 0xec, 0x2a, 0xd2,
	0x4c, 0xf0, 0x73, 0x2a, 0xc6, 0x78, 0x2e, 0x31, 0x66, 0x4a, 0xcb, 0x99, 0x3d, 0x30, 0xf8, 0x56,
	0x87, 0xee, 0x40, 0xc5, 0x67, 0xe2, 0x03, 0xf2, 0x21, 0x5e, 0xa4, 0xa8, 0x34, 0x71, 0x61, 0x9b,
	0x4a, 0x8c, 0xb4, 0x90, 0xae, 0xb3, 0xef, 0x1c, 0x74, 0x86, 0x4b, 0x93, 0x3c, 0x82, 0x96, 0x46,
	0x1e, 0x71, 0xed, 0xd6, 0x0d, 0x91, 0x5b, 0x64, 0x0f, 0x9a, 0x8a, 0x8a, 0x04, 0xdd, 0x86, 0x81,
	0xad, 0x41, 0x1e, 0x43, 0x27, 0x96, 0x11, 0xd7, 0x67, 0xb3, 0x04, 0xdd, 0x2d, 0xc3, 0xac, 0x00,
	0xe2, 0x41, 0x9b, 0x7e, 0x64, 0xc8, 0xf5, 0xe9, 0xd8, 0x6d, 0x1a, 0xb2, 0xb0, 0x49, 0x00, 0xf7,
	0xed, 0xff, 0x1b, 0xa4, 0x12, 0xb5, 0xdb, 0x32, 0xfc, 0x1a, 0x46, 0x7c, 0x80, 0x31, 0x5e, 0x32,
	0x8a, 0xaf, 0xc4, 0x18, 0xdd, 0x6d, 0xe3, 0x51, 0x42, 0xc8, 0x11, 0xec, 0x5a, 0xff, 0x13, 0xa5,
	0x50, 0x66, 0x02, 0x98, 0x3c, 0xda, 0xc6, 0xf1, 0x4f, 0x14, 0x39, 0x80, 0x6e, 0x05, 0x76, 0x3b,
	0xc6, 0xbb, 0x0a, 0x07, 0x09, 0xec, 0xac, 0x44, 0x53, 0x89, 0xe0, 0x0a, 0xc9, 0x3e, 0xdc, 0x8b,
	0x28, 0x45, 0xa5, 0x0c, 0x9c, 0x2b, 0x57, 0x86, 0x32, 0x3d, 0x74, 0xf6, 0x63, 0xf2, 0xb0, 0x02,
	0xae, 0x80, 0x8c, 0xc5, 0x69, 0xc2, 0x24, 0xaa, 0x53, 0x6e, 0x74, 0x6c, 0x0c, 0x57, 0x40, 0x70,
	0x05, 0x7b, 0x03, 0x15, 0xf7, 0x8b, 0xf2, 0xfe, 0xbf, 0x57, 0x65, 0xdd, 0x1b, 0x15, 0xdd, 0x8b,
	0x3e, 0x6e, 0x95, 0xfa, 0x18, 0x7c, 0x81, 0x87, 0x95, 0xbb, 0xf3, 0x92, 0xd7, 0x5b, 0xe0, 0x6c,
	0xb4, 0xc0, 0x83, 0x76, 0xaa, 0x50, 0x1a, 0xd6, 0x26, 0x51, 0xd8, 0xe4, 0x09, 0xec, 0x5c, 0xa2,
	0x64, 0xef, 0x19, 0xb5, 0xc3, 0x99, 0x4a, 0x96, 0xa7, 0xd3, 0x2d, 0xe3, 0x6f, 0x25, 0x0b, 0x66,
	0xb0, 0x3b, 0x50, 0xf1, 0x49, 0x3e, 0xcb, 0x77, 0x5a, 0x7a, 0xdf, 0xc8, 0x5e, 0xba, 0x3a, 0xaf,
	0xfc, 0x10, 0x1e, 0xac, 0xed, 0x56, 0x49, 0x80, 0x4d, 0xe2, 0xc5, 0x8f, 0x3a, 0x34, 0x06, 0x2a,
	0x26, 0x23, 0x68, 0xda, 0x49, 0x78, 0x1a, 0xfe, 0x7d, 0x8f, 0xc3, 0xca, 0x3a, 0x7a, 0x87, 0xb7,
	0x73, 0xce, 0x33, 0xbb, 0x00, 0xe8, 0x97, 0x96, 0xe0, 0x86, 0xd8, 0x8d, 0x81, 0xf2, 0x9e, 0xff,
	0x43, 0x44, 0x7e, 0x25, 0x87, 0x4e, 0xa1, 0x10, 0xe9, 0xdd, 0x10, 0x5f, 0x6d, 0xa3, 0x77, 0x74,
	0xfb, 0x00, 0x7b, 0xdf, 0xcb, 0xd7, 0xdf, 0xe7, 0xbe, 0x73, 0x3d, 0xf7, 0x9d, 0x5f, 0x73, 0xdf,
	0xf9, 0xba, 0xf0, 0x6b, 0xd7, 0x0b, 0xbf, 0xf6, 0x73, 0xe1, 0xd7, 0xde, 0x85, 0x31, 0xd3, 0x93,
	0x74, 0x14, 0x52, 0xf1, 0xa9, 0x37, 0xc2, 0x67, 0xf6, 0xd8, 0x5e, 0xf1, 0x2e, 0x4e, 0x4b, 0x2f,
	0xea, 0x2c, 0x41, 0x35, 0x6a, 0x99, 0x47, 0xf0, 0xf8, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x23,
	0xb3, 0xb8, 0x1d, 0x73, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	Token(ctx context.Context, in *MsgTokenRequest, opts ...grpc.CallOption) (*MsgTokenResponse, error)
	DeviceCode(ctx context.Context, in *MsgDeviceCodeRequest, opts ...grpc.CallOption) (*MsgDeviceCodeResponse, error)
	Authorize(ctx context.Context, in *MsgAuthorizeRequest, opts ...grpc.CallOption) (*MsgAuthorizeResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Token(ctx context.Context, in *MsgTokenRequest, opts ...grpc.CallOption) (*MsgTokenResponse, error) {
	out := new(MsgTokenResponse)
	err := c.cc.Invoke(ctx, "/beheroes.doxchain.oauthtwo.Msg/Token", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeviceCode(ctx context.Context, in *MsgDeviceCodeRequest, opts ...grpc.CallOption) (*MsgDeviceCodeResponse, error) {
	out := new(MsgDeviceCodeResponse)
	err := c.cc.Invoke(ctx, "/beheroes.doxchain.oauthtwo.Msg/DeviceCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Authorize(ctx context.Context, in *MsgAuthorizeRequest, opts ...grpc.CallOption) (*MsgAuthorizeResponse, error) {
	out := new(MsgAuthorizeResponse)
	err := c.cc.Invoke(ctx, "/beheroes.doxchain.oauthtwo.Msg/Authorize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	Token(context.Context, *MsgTokenRequest) (*MsgTokenResponse, error)
	DeviceCode(context.Context, *MsgDeviceCodeRequest) (*MsgDeviceCodeResponse, error)
	Authorize(context.Context, *MsgAuthorizeRequest) (*MsgAuthorizeResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Token(ctx context.Context, req *MsgTokenRequest) (*MsgTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Token not implemented")
}
func (*UnimplementedMsgServer) DeviceCode(ctx context.Context, req *MsgDeviceCodeRequest) (*MsgDeviceCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceCode not implemented")
}
func (*UnimplementedMsgServer) Authorize(ctx context.Context, req *MsgAuthorizeRequest) (*MsgAuthorizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authorize not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Token_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Token(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beheroes.doxchain.oauthtwo.Msg/Token",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Token(ctx, req.(*MsgTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeviceCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeviceCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeviceCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beheroes.doxchain.oauthtwo.Msg/DeviceCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeviceCode(ctx, req.(*MsgDeviceCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Authorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAuthorizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Authorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/beheroes.doxchain.oauthtwo.Msg/Authorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Authorize(ctx, req.(*MsgAuthorizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "beheroes.doxchain.oauthtwo.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Token",
			Handler:    _Msg_Token_Handler,
		},
		{
			MethodName: "DeviceCode",
			Handler:    _Msg_DeviceCode_Handler,
		},
		{
			MethodName: "Authorize",
			Handler:    _Msg_Authorize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "doxchain/oauthtwo/tx.proto",
}

func (m *MsgTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTokenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClientAssertion) > 0 {
		i -= len(m.ClientAssertion)
		copy(dAtA[i:], m.ClientAssertion)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClientAssertion)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ClientAssertionType) > 0 {
		i -= len(m.ClientAssertionType)
		copy(dAtA[i:], m.ClientAssertionType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClientAssertionType)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DeviceCode) > 0 {
		i -= len(m.DeviceCode)
		copy(dAtA[i:], m.DeviceCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DeviceCode)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ClientSecret) > 0 {
		i -= len(m.ClientSecret)
		copy(dAtA[i:], m.ClientSecret)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClientSecret)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GrantType) > 0 {
		i -= len(m.GrantType)
		copy(dAtA[i:], m.GrantType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.GrantType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Scope) > 0 {
		i -= len(m.Scope)
		copy(dAtA[i:], m.Scope)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Scope)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpiresIn != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ExpiresIn))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TokenType) > 0 {
		i -= len(m.TokenType)
		copy(dAtA[i:], m.TokenType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeviceCodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeviceCodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeviceCodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Scope) > 0 {
		i -= len(m.Scope)
		copy(dAtA[i:], m.Scope)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Scope)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeviceCodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeviceCodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeviceCodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VerificationUri) > 0 {
		i -= len(m.VerificationUri)
		copy(dAtA[i:], m.VerificationUri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VerificationUri)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserCode) > 0 {
		i -= len(m.UserCode)
		copy(dAtA[i:], m.UserCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DeviceCode) > 0 {
		i -= len(m.DeviceCode)
		copy(dAtA[i:], m.DeviceCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DeviceCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAuthorizeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAuthorizeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAuthorizeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Scope) > 0 {
		i -= len(m.Scope)
		copy(dAtA[i:], m.Scope)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Scope)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAuthorizeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAuthorizeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAuthorizeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuthorizationCode) > 0 {
		i -= len(m.AuthorizationCode)
		copy(dAtA[i:], m.AuthorizationCode)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AuthorizationCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Scope)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.GrantType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClientSecret)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DeviceCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClientAssertionType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClientAssertion)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ExpiresIn != 0 {
		n += 1 + sovTx(uint64(m.ExpiresIn))
	}
	return n
}

func (m *MsgDeviceCodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Scope)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeviceCodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UserCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.VerificationUri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAuthorizeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Scope)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAuthorizeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AuthorizationCode)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scope = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrantType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrantType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientAssertionType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientAssertionType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientAssertion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientAssertion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresIn", wireType)
			}
			m.ExpiresIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresIn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeviceCodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeviceCodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeviceCodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scope = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeviceCodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeviceCodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeviceCodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAuthorizeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAuthorizeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAuthorizeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scope = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAuthorizeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAuthorizeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAuthorizeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizationCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
