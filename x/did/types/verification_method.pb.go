// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: doxchain/did/verification_method.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VerificationMethod struct {
	Id         Did    `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Type       string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Controller Did    `protobuf:"bytes,3,opt,name=controller,proto3" json:"controller"`
	// Types that are valid to be assigned to KeyOneof:
	//	*VerificationMethod_PublicKeyJwk
	//	*VerificationMethod_PublicKeyMultibase
	KeyOneof isVerificationMethod_KeyOneof `protobuf_oneof:"key_oneof"`
}

func (m *VerificationMethod) Reset()         { *m = VerificationMethod{} }
func (m *VerificationMethod) String() string { return proto.CompactTextString(m) }
func (*VerificationMethod) ProtoMessage()    {}
func (*VerificationMethod) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e36e828cb90608e, []int{0}
}
func (m *VerificationMethod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerificationMethod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerificationMethod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerificationMethod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerificationMethod.Merge(m, src)
}
func (m *VerificationMethod) XXX_Size() int {
	return m.Size()
}
func (m *VerificationMethod) XXX_DiscardUnknown() {
	xxx_messageInfo_VerificationMethod.DiscardUnknown(m)
}

var xxx_messageInfo_VerificationMethod proto.InternalMessageInfo

type isVerificationMethod_KeyOneof interface {
	isVerificationMethod_KeyOneof()
	MarshalTo([]byte) (int, error)
	Size() int
}

type VerificationMethod_PublicKeyJwk struct {
	PublicKeyJwk string `protobuf:"bytes,4,opt,name=publicKeyJwk,proto3,oneof" json:"publicKeyJwk,omitempty"`
}
type VerificationMethod_PublicKeyMultibase struct {
	PublicKeyMultibase string `protobuf:"bytes,5,opt,name=publicKeyMultibase,proto3,oneof" json:"publicKeyMultibase,omitempty"`
}

func (*VerificationMethod_PublicKeyJwk) isVerificationMethod_KeyOneof()       {}
func (*VerificationMethod_PublicKeyMultibase) isVerificationMethod_KeyOneof() {}

func (m *VerificationMethod) GetKeyOneof() isVerificationMethod_KeyOneof {
	if m != nil {
		return m.KeyOneof
	}
	return nil
}

func (m *VerificationMethod) GetId() Did {
	if m != nil {
		return m.Id
	}
	return Did{}
}

func (m *VerificationMethod) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *VerificationMethod) GetController() Did {
	if m != nil {
		return m.Controller
	}
	return Did{}
}

func (m *VerificationMethod) GetPublicKeyJwk() string {
	if x, ok := m.GetKeyOneof().(*VerificationMethod_PublicKeyJwk); ok {
		return x.PublicKeyJwk
	}
	return ""
}

func (m *VerificationMethod) GetPublicKeyMultibase() string {
	if x, ok := m.GetKeyOneof().(*VerificationMethod_PublicKeyMultibase); ok {
		return x.PublicKeyMultibase
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*VerificationMethod) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*VerificationMethod_PublicKeyJwk)(nil),
		(*VerificationMethod_PublicKeyMultibase)(nil),
	}
}

type VerificationRelationship struct {
	VerificationMethod VerificationMethod `protobuf:"bytes,1,opt,name=verificationMethod,proto3" json:"verificationMethod"`
}

func (m *VerificationRelationship) Reset()         { *m = VerificationRelationship{} }
func (m *VerificationRelationship) String() string { return proto.CompactTextString(m) }
func (*VerificationRelationship) ProtoMessage()    {}
func (*VerificationRelationship) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e36e828cb90608e, []int{1}
}
func (m *VerificationRelationship) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerificationRelationship) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerificationRelationship.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerificationRelationship) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerificationRelationship.Merge(m, src)
}
func (m *VerificationRelationship) XXX_Size() int {
	return m.Size()
}
func (m *VerificationRelationship) XXX_DiscardUnknown() {
	xxx_messageInfo_VerificationRelationship.DiscardUnknown(m)
}

var xxx_messageInfo_VerificationRelationship proto.InternalMessageInfo

func (m *VerificationRelationship) GetVerificationMethod() VerificationMethod {
	if m != nil {
		return m.VerificationMethod
	}
	return VerificationMethod{}
}

func init() {
	proto.RegisterType((*VerificationMethod)(nil), "beheroes.doxchain.did.VerificationMethod")
	proto.RegisterType((*VerificationRelationship)(nil), "beheroes.doxchain.did.VerificationRelationship")
}

func init() {
	proto.RegisterFile("doxchain/did/verification_method.proto", fileDescriptor_0e36e828cb90608e)
}

var fileDescriptor_0e36e828cb90608e = []byte{
	// 334 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0x86, 0xdb, 0x8a, 0x26, 0x2c, 0x9e, 0x36, 0x6a, 0x1a, 0x0e, 0x95, 0x10, 0x63, 0xe0, 0x60,
	0x4b, 0xf4, 0x05, 0x0c, 0x7a, 0x30, 0x1a, 0x2e, 0x3d, 0x78, 0xf0, 0x42, 0xd8, 0xee, 0x40, 0x27,
	0x94, 0x4e, 0xd3, 0x2e, 0x08, 0xf1, 0xe4, 0x1b, 0xf8, 0x58, 0x1c, 0x39, 0x7a, 0x32, 0x06, 0x5e,
	0xc4, 0xb0, 0x54, 0x02, 0x01, 0x13, 0x4f, 0x3b, 0xbb, 0x3b, 0xf3, 0xff, 0x99, 0xef, 0x67, 0x97,
	0x92, 0xc6, 0x41, 0xd8, 0xc1, 0xd8, 0x93, 0x28, 0xbd, 0x11, 0xa4, 0xd8, 0xc5, 0xa0, 0xa3, 0x90,
	0xe2, 0xf6, 0x00, 0x54, 0x48, 0xd2, 0x4d, 0x52, 0x52, 0xc4, 0x4f, 0x05, 0x84, 0x90, 0x12, 0x64,
	0xee, 0xef, 0x80, 0x2b, 0x51, 0x96, 0x4f, 0x7a, 0xd4, 0x23, 0xdd, 0xe1, 0x2d, 0xab, 0x55, 0x73,
	0xf9, 0x6c, 0x4b, 0x54, 0x62, 0x2e, 0x52, 0x7d, 0xb7, 0x18, 0x7f, 0xde, 0xb0, 0x68, 0x69, 0x07,
	0xde, 0x60, 0x16, 0x4a, 0xdb, 0xac, 0x98, 0xb5, 0xd2, 0x75, 0xd9, 0xdd, 0x6b, 0xe4, 0xde, 0xa3,
	0x6c, 0x16, 0xa6, 0x5f, 0xe7, 0x86, 0x6f, 0xa1, 0xe4, 0x9c, 0x15, 0xd4, 0x24, 0x01, 0xdb, 0xaa,
	0x98, 0xb5, 0xa2, 0xaf, 0x6b, 0x7e, 0xcb, 0x58, 0x40, 0xb1, 0x4a, 0x29, 0x8a, 0x20, 0xb5, 0x0f,
	0xfe, 0xa9, 0xb6, 0x31, 0xc3, 0x2f, 0xd8, 0x71, 0x32, 0x14, 0x11, 0x06, 0x4f, 0x30, 0x79, 0x7c,
	0xed, 0xdb, 0x85, 0xa5, 0xfa, 0x83, 0xe1, 0x6f, 0xbd, 0xf2, 0x06, 0xe3, 0xeb, 0x7b, 0x6b, 0x18,
	0x29, 0x14, 0x9d, 0x0c, 0xec, 0xc3, 0xbc, 0x77, 0xcf, 0x5f, 0xb3, 0xc4, 0x8a, 0x7d, 0x98, 0xb4,
	0x29, 0x06, 0xea, 0x56, 0xdf, 0x98, 0xbd, 0x89, 0xc0, 0x87, 0x48, 0x9f, 0x59, 0x88, 0x09, 0x6f,
	0x33, 0x3e, 0xda, 0xc1, 0x93, 0x83, 0xa9, 0xff, 0xb1, 0xca, 0x2e, 0xcf, 0x7c, 0xb3, 0x3d, 0x52,
	0xcd, 0xbb, 0xe9, 0xdc, 0x31, 0x67, 0x73, 0xc7, 0xfc, 0x9e, 0x3b, 0xe6, 0xc7, 0xc2, 0x31, 0x66,
	0x0b, 0xc7, 0xf8, 0x5c, 0x38, 0xc6, 0x4b, 0xbd, 0x87, 0x2a, 0x1c, 0x0a, 0x37, 0xa0, 0x81, 0x27,
	0xe0, 0x6a, 0xe5, 0xe4, 0xad, 0x73, 0x1c, 0xeb, 0x24, 0x97, 0x9c, 0x33, 0x71, 0xa4, 0xc3, 0xbc,
	0xf9, 0x09, 0x00, 0x00, 0xff, 0xff, 0x5a, 0x5b, 0x1e, 0xe8, 0x3b, 0x02, 0x00, 0x00,
}

func (m *VerificationMethod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerificationMethod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerificationMethod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KeyOneof != nil {
		{
			size := m.KeyOneof.Size()
			i -= size
			if _, err := m.KeyOneof.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	{
		size, err := m.Controller.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintVerificationMethod(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintVerificationMethod(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintVerificationMethod(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VerificationMethod_PublicKeyJwk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerificationMethod_PublicKeyJwk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PublicKeyJwk)
	copy(dAtA[i:], m.PublicKeyJwk)
	i = encodeVarintVerificationMethod(dAtA, i, uint64(len(m.PublicKeyJwk)))
	i--
	dAtA[i] = 0x22
	return len(dAtA) - i, nil
}
func (m *VerificationMethod_PublicKeyMultibase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerificationMethod_PublicKeyMultibase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.PublicKeyMultibase)
	copy(dAtA[i:], m.PublicKeyMultibase)
	i = encodeVarintVerificationMethod(dAtA, i, uint64(len(m.PublicKeyMultibase)))
	i--
	dAtA[i] = 0x2a
	return len(dAtA) - i, nil
}
func (m *VerificationRelationship) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerificationRelationship) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerificationRelationship) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.VerificationMethod.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintVerificationMethod(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintVerificationMethod(dAtA []byte, offset int, v uint64) int {
	offset -= sovVerificationMethod(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VerificationMethod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Id.Size()
	n += 1 + l + sovVerificationMethod(uint64(l))
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovVerificationMethod(uint64(l))
	}
	l = m.Controller.Size()
	n += 1 + l + sovVerificationMethod(uint64(l))
	if m.KeyOneof != nil {
		n += m.KeyOneof.Size()
	}
	return n
}

func (m *VerificationMethod_PublicKeyJwk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKeyJwk)
	n += 1 + l + sovVerificationMethod(uint64(l))
	return n
}
func (m *VerificationMethod_PublicKeyMultibase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKeyMultibase)
	n += 1 + l + sovVerificationMethod(uint64(l))
	return n
}
func (m *VerificationRelationship) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.VerificationMethod.Size()
	n += 1 + l + sovVerificationMethod(uint64(l))
	return n
}

func sovVerificationMethod(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVerificationMethod(x uint64) (n int) {
	return sovVerificationMethod(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VerificationMethod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerificationMethod
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerificationMethod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerificationMethod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerificationMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerificationMethod
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVerificationMethod
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerificationMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerificationMethod
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerificationMethod
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controller", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerificationMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerificationMethod
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVerificationMethod
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Controller.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeyJwk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerificationMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerificationMethod
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerificationMethod
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyOneof = &VerificationMethod_PublicKeyJwk{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKeyMultibase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerificationMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVerificationMethod
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVerificationMethod
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyOneof = &VerificationMethod_PublicKeyMultibase{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVerificationMethod(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVerificationMethod
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerificationRelationship) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerificationMethod
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerificationRelationship: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerificationRelationship: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationMethod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerificationMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVerificationMethod
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVerificationMethod
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VerificationMethod.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVerificationMethod(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVerificationMethod
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVerificationMethod(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVerificationMethod
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVerificationMethod
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVerificationMethod
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVerificationMethod
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVerificationMethod
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVerificationMethod
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVerificationMethod        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVerificationMethod          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVerificationMethod = fmt.Errorf("proto: unexpected end of group")
)
